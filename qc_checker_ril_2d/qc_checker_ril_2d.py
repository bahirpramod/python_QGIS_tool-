# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Qccheckerril
                                 A QGIS plugin
 qc checker for ril 2d bulding and maek error point
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-05-12
        git sha              : $Format:%H$
        copyright            : (C) 2023 by genesys
        email                : pramoddb@email.igenesys.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import *
from qgis.PyQt.QtGui import *
from qgis.PyQt.QtWidgets import *
from qgis.core import *
from qgis.utils import *
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5 import QtGui
from qgis.core import *
from qgis.gui import *
from collections import *
import sys
import math
import itertools
from qgis import processing
from qgis.core import QgsGeometry, QgsGeometryUtils

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .qc_checker_ril_2d_dialog import QccheckerrilDialog
import os.path


class Qccheckerril:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'Qccheckerril_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Qc Checker Ril')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('Qccheckerril', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/qc_checker_ril_2d/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Qc Checker for Ril 2D'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Qc Checker Ril'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = QccheckerrilDialog()
            self.dlg.Cancel.clicked.connect(self.close)
            self.dlg.pb_2.clicked.connect(self.close)
            self.dlg.Ok.clicked.connect(self.find_cases)
            self.dlg.pb_1.clicked.connect(self.find_cases_2_selected)
            # self.dlg.pb_1.clicked.connect(self.find_cases_2)

        # show the dialog
        self.dlg.show()
        self.addlayers()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
    def close(self):
        self.dlg.close()
    
    def addlayers(self):
        self.layer=QgsProject.instance().mapLayers().values()
        self.dlg.comboBox.clear()
        self.dlg.comboBox_1.clear()
        self.dlg.comboBox_2.clear()
        self.dlg.comboBox_3.clear()
        self.dlg.comboBox_4.clear()
        self.dlg.comboBox_5.clear()
        self.dlg.comboBox.addItems([layer.name() for layer in self.layer])
        self.dlg.comboBox_1.addItems([layer.name() for layer in self.layer])
        self.dlg.comboBox_2.addItems([layer.name() for layer in self.layer])
        self.dlg.comboBox_3.addItems([layer.name() for layer in self.layer])
        self.dlg.comboBox_4.addItems([layer.name() for layer in self.layer])
        self.dlg.comboBox_5.addItems([layer.name() for layer in self.layer])

    def find_cases(self):
        current_layer=self.dlg.comboBox.currentText()
        for layer in self.layer:
            layer_name=layer.name()
            if current_layer==layer_name:
                self.input_layer=layer
        self.input_layer.startEditing()
        count=self.input_layer.selectedFeatureCount()
        if count<=0 :
            QMessageBox.information(self.dlg, "Info"," Please select the features")
            return
        # self.errorPointFeatures = []
        # uri = "Point?crs=" + self.input_layer.crs().authid()
        # vMemorylayer = QgsVectorLayer(uri, " RIL building error", "memory")
        # vMemorylayer.startEditing()
        # layerData = vMemorylayer.dataProvider()
        # layerData.addAttributes([QgsField("Fid", QVariant.String), QgsField("layer name", QVariant.String), QgsField("Error name", QVariant.String)])
        # dctErrPnts = defaultdict()
        self.new_layer()
        dctErrPnts = defaultdict()
        print(dctErrPnts.type())
        for feature in self.input_layer.selectedFeatures():
            feat=feature
            pt = feature.geometry().centroid().asPoint()
            point_geom= QgsGeometry.fromPointXY(QgsPointXY(pt))
            # print(point_geom)
            for fields in feature.fields():
                field_name=str(fields.name())
                fields_name=field_name.lower()

                '''case -1 
                In 2D RIL building if tag is Overlap then remark should only be Unmapped (Group id Blank)
                '''
                if self.dlg.checkBox.isChecked() == True:
                    if fields_name=="tag"   :
                        tag=str(feature['tag'])
                        rem_ark=str(feature['remark'])
                        gi_D=str(feature['group_ID'])
                        if tag.lower()=='overlap' :
                            if (rem_ark.lower() !='unmapped' ) :
                                name="Remark is not Unmapped " 
                                dctErrPnts[feat.id()] = [point_geom, self.input_layer.name(),name]
                            elif  (gi_D.lower()!='null')  :
                                name="GROUP_ID is not NULL "
                                dctErrPnts[feat.id()] = [point_geom, self.input_layer.name(),name]

                '''
                case -2 
                In 2D RIL building if remark is ‘Unmapped’ then tag should only be Overlap (Group id Blank)
                '''
                if self.dlg.checkBox_1.isChecked() == True:
                    if fields_name=="remark"  :   
                        tag_2=str(feature['tag'])
                        rem_ark_2=str(feature['remark'])
                        gi_D_2=str(feature['group_id'])
                        if rem_ark_2.lower()=='unmapped' :
                            # print("Case-2")
                            if tag_2.lower()!='overlap' :
                                # print("case 2  not overlap")
                                name="TAG is  NOt Overlap "
                                dctErrPnts[feat.id()] = [point_geom, self.input_layer.name(),name]
                            elif  (gi_D_2.lower()!='null') :
                                name="GROUP_ID is not NULL "
                                dctErrPnts[feat.id()] = [point_geom, self.input_layer.name(),name]

                '''case -3
                
                In 2D RIL building if remark is Mapped then tag should not be Overlap (tag should be blank)
                ''' 
                if self.dlg.checkBox_2.isChecked() == True:
                    if fields_name=="remark" :
                        rem_ark_3=str(feature['remark'])
                        tag_3=str(feature['tag'])
                        if rem_ark_3.lower()=="mapped"  :
                            # print("Cptl")
                            if  tag_3.lower()=='overlap' :
                                # print("case 3 is Overlap")
                                name="TAG is Overlap "
                                dctErrPnts[feat.id()] = [point_geom, self.input_layer.name(),name]
                '''Case 4'''            
                '''In 2D RIL building if remark is ‘RIL Additional’ then tag should not be Overlap and GID should be blank'''
                if self.dlg.checkBox_3.isChecked() == True:
                    if fields_name=="remark"  :
                        rem_ark_4=str(feature['remark'])
                        tag_4=str(feature['tag'])
                        gi_D_4=str(feature['GROUP_id'])
                        if rem_ark_4.lower()=="ril additional" :
                            if tag_4.lower()=='overlap':
                                name="TAG is Overlap "
                                dctErrPnts[feat.id()] = [point_geom, self.input_layer.name(),name]  
                            elif  (gi_D_4.lower()!='null') :
                                name="GROUP_ID is not NULL "
                                dctErrPnts[feat.id()] = [point_geom, self.input_layer.name(),name]       

                
                                 
                            

        for ids, feats in dctErrPnts.items():  # pntGeom = QgsGeometry().fromPointXY(iter[0])
            # print("dctErrPnts",dctErrPnts)
            # print("ids",ids)
            # print('feats',feats)
            self.updateErrorPointFeatures([ids, feats[1],feats[2]], feats[0])
        if len(dctErrPnts) > 0:
            QgsProject.instance().addMapLayer(vMemorylayer)
            layerData.addFeatures(self.errorPointFeatures)
            vMemorylayer.commitChanges()
            QMessageBox.information(None, ' RIL building error', 'Process completed. Error layer added')
        else:
            QMessageBox.information(None, ' RIL building error', 'Process completed. No error found')
            pass

    def find_cases_2_selected (self):
        if self.dlg.checkBox_4.isChecked() == True:
            aligned_layer=self.dlg.comboBox_1.currentText()
            for layer in self.layer:
                layer_name=layer.name()
                if aligned_layer==layer_name:
                    self.aligned_layer=layer
            self.input_layer=self.aligned_layer
            self.aligned_layer.startEditing()
            a_count=self.aligned_layer.selectedFeatureCount()
            if a_count<=0 :
                QMessageBox.information(self.dlg, "Info"," Please select ALIGNED BLDG features")
                return
            orignle_layer=self.dlg.comboBox_2.currentText()
            for layer in self.layer:
                layer_name=layer.name()
                if orignle_layer==layer_name:
                    self.orignle_layer=layer
            self.orignle_layer.startEditing()
            o_count=self.orignle_layer.selectedFeatureCount()
            if a_count<=0 and o_count<=0 :
                QMessageBox.information(self.dlg, "Info"," Please select the features")
                return
            # self.new_layer()
            self.errorPointFeatures = []
            uri = "Point?crs=" + self.aligned_layer.crs().authid()
            # uri = "Point?crs=" + self.orignle_layer.crs().authid()
            vMemorylayer = QgsVectorLayer(uri, " RIL building error", "memory")
            vMemorylayer.startEditing()
            layerData = vMemorylayer.dataProvider()
            layerData.addAttributes([QgsField("Fid", QVariant.String), QgsField("layer name", QVariant.String), QgsField("Error name", QVariant.String)])
            dctErrPnts = defaultdict()
            # dctErrPnts = defaultdict()
            polygon_id_orignale=[] 
            group_id_orignale=[]  
            rj_id_orignale=[] 

            '''Case 5'''  
            '''Compare ALIGNED_BLDG (Polygon ID + Group ID + RJID) to 3D_ORIGINAL_BLDG (Polygon ID + Group ID + RJID)
            '''  
        
            polygon_id_orignale=[] 
            group_id_orignale=[]  
            rj_id_orignale=[]
            for feature in self.orignle_layer.getFeatures():
                feat=feature
                
                # print(point_geom)
                # for fields in feature.fields():
                #     field_name=str(fields.name())
                #     fields_name=field_name.lower()
                polygon_id_orignale.append( str(feature["polygon_id"]))
                group_id_orignale.append( str(feature["group_id"]))
                rj_id_orignale.append( str(feature["building_r"]))
            # print("pid",polygon_id_orignale)
            # print("gid",group_id_orignale)
            # print("gid",rj_id_orignale)
            for feature in self.aligned_layer.selectedFeatures():
                pt = feature.geometry().centroid().asPoint()
                point_geom= QgsGeometry.fromPointXY(QgsPointXY(pt))
                polygon_id_aligned=( str(feature["polygon_id"]))
                group_id_aligned=( str(feature["group_id"]))
                rj_id_aligned=( str(feature["building_r"]))
                if polygon_id_aligned in polygon_id_orignale:
                    # print("pida exist")
                    if group_id_aligned in group_id_orignale:
                        # pass
                        # print("gid exist")
                        if rj_id_aligned in rj_id_orignale:
                            pass
                            # print("rjid exist")
                        else:
                            # print("rjid",rj_id_aligned)
                            name="RJID miss in 3D Aligned BLDG"
                            dctErrPnts[feature .id()] = [point_geom, self.aligned_layer.name(),name] 
                    else:
                        # print("gida",group_id_aligned)
                        name="GID miss in 3D Aligned BLDG"
                        dctErrPnts[feature .id()] = [point_geom, self.aligned_layer.name(),name] 
                    pass
                else :
                    # print("pida",polygon_id_aligned)
                    name="polygone id miss in 3D Aligned BLDG"
                    dctErrPnts[feature .id()] = [point_geom, self.aligned_layer.name(),name] 
                
            

            for ids, feats in dctErrPnts.items():  # pntGeom = QgsGeometry().fromPointXY(iter[0])
                # print("dctErrPnts",dctErrPnts)
                # print("ids",ids)
                # print('feats',feats)
                self.updateErrorPointFeatures([ids, feats[1],feats[2]], feats[0])
            if len(dctErrPnts) > 0:
                QgsProject.instance().addMapLayer(vMemorylayer)
                layerData.addFeatures(self.errorPointFeatures)
                vMemorylayer.commitChanges()
                QMessageBox.information(None, ' RIL building error', 'Process completed. Error layer added')
            else:
                QMessageBox.information(None, ' RIL building error', 'Process completed. No error found')
                pass

        '''Case--5'''
        ''' RJID should be  blank in 3D(Except New and New_1)'''
        if self.dlg.checkBox_5.isChecked() == True or self.dlg.checkBox_6.isChecked() == True  or self.dlg.checkBox_11.isChecked() == True :
            current_layer=self.dlg.comboBox_3.currentText()
            for layer in self.layer:
                layer_name=layer.name()
                if current_layer==layer_name:
                    self.input_layer=layer
            self.input_layer.startEditing()
            count=self.input_layer.selectedFeatureCount()
            
            if count<=0 :
                QMessageBox.information(self.dlg, "Info"," Please select the features")
                return
            self.errorPointFeatures = []
            uri = "Point?crs=" + self.input_layer.crs().authid()
            # uri = "Point?crs=" + self.orignle_layer.crs().authid()
            vMemorylayer = QgsVectorLayer(uri, " RIL building error", "memory")
            vMemorylayer.startEditing()
            layerData = vMemorylayer.dataProvider()
            layerData.addAttributes([QgsField("Fid", QVariant.String), QgsField("layer name", QVariant.String), QgsField("Error name", QVariant.String)])
            dctErrPnts = defaultdict()
            for feature in self.input_layer.selectedFeatures():
                pt = feature.geometry().centroid().asPoint()
                point_geom= QgsGeometry.fromPointXY(QgsPointXY(pt))
                RJID=(str(feature["building_r"]))
                rjid=RJID.lower()
                tag=(str(feature["TAG"]))
                remark=str(feature["remark"])
                GID=str(feature["group_id"])
                gid=GID.lower()
                # print("remark",remark)
                # print("gid",gid)
                if self.dlg.checkBox_5.isChecked() == True:
                    if tag.lower()=="new" or tag.lower()=="new_1" :
                        if rjid!="null":
                            # print("null")
                            name="if tag is new/new_1 RJID Fill"
                            dctErrPnts[feature .id()] = [point_geom, self.input_layer.name(),name]
                            pass
                ''' Case 6'''             
                '''RJID + Group ID  check for blank in 2D (should not be blank)  (Except unmapped and RIL Additional)'''
                if self.dlg.checkBox_6.isChecked() == True:
                    if remark.lower()=="unmapped" or remark.lower()=="ril additional":
                        # print("text")
                        if gid!="null":
                            name="if remark is unmapped/ril addition GID Fill"
                            dctErrPnts[feature .id()] = [point_geom, self.input_layer.name(),name]
            ''' Case 11 '''
            '''GID_Split should not have duplicate Polygon ID(shoud be unique) if feature split Polygon id 2 time otherwise error mark'''
            if self.dlg.checkBox_11.isChecked() == True:
                current_layer=self.dlg.comboBox_3.currentText()
                for layer in self.layer:
                    layer_name=layer.name()
                    if current_layer==layer_name:
                        self.input_layer=layer
                self.input_layer.startEditing()
                count=self.input_layer.selectedFeatureCount()
                
                # if count<=0 :
                #     QMessageBox.information(self.dlg, "Info"," Please select the features")
                #     return
                self.errorPointFeatures = []
                uri = "Point?crs=" + self.input_layer.crs().authid()
                # uri = "Point?crs=" + self.orignle_layer.crs().authid()
                vMemorylayer = QgsVectorLayer(uri, " RIL building error", "memory")
                vMemorylayer.startEditing()
                layerData = vMemorylayer.dataProvider()
                layerData.addAttributes([QgsField("Fid", QVariant.String), QgsField("layer name", QVariant.String), QgsField("Error name", QVariant.String)])
                dctErrPnts = defaultdict()
                pol_list=[]
                for feature in self.input_layer.getFeatures():
                    pt = feature.geometry().centroid().asPoint()
                    point_geom= QgsGeometry.fromPointXY(QgsPointXY(pt))
                    self.tag=feature["TAG"]
                    self.pol_id=feature["POLYGON_ID"]
                    # print("tag",tag)
                    # print("pol", pol_id)
                    pol_list.append(self.pol_id)
                count=len(pol_list)
                # print("count",count)
                if self.tag=="GID_Split":
                    self.p_id=feature["POLYGON_ID"]
                    count=pol_list.count(self.p_id)
                    if count>1:
                        # print(" no unique")
                        field_name = "POLYGON_ID"
                        filter_value = str (self.p_id)
                        expression = QgsExpression(f'"{field_name}" = \'{filter_value}\'')
                        context = QgsExpressionContext()
                        context.appendScopes(QgsExpressionContextUtils.globalProjectLayerScopes(self.input_layer))
                        feature3d=self.input_layer.getFeatures(QgsFeatureRequest(expression, context))
                        
                        for feat in feature3d: 
                            # print("text", feat.id())
                            pt = feat.geometry().centroid().asPoint()
                            point_geom= QgsGeometry.fromPointXY(QgsPointXY(pt))
                            name="GID SPLIT POL_ID DUBLICATE"
                            dctErrPnts[feat .id()] = [point_geom, self.input_layer.name(),name]
                if self.tag=="Feature_Split":
                    # print("feature split")
                    self.p_id2=feature["POLYGON_ID"]
                    count=pol_list.count(self.p_id2)
                    # print("c",count)
                    if count!=2:
                        # print(" no unique")
                        field_name = "POLYGON_ID"
                        filter_value = str (self.p_id2)
                        expression = QgsExpression(f'"{field_name}" = \'{filter_value}\'')
                        context = QgsExpressionContext()
                        context.appendScopes(QgsExpressionContextUtils.globalProjectLayerScopes(self.input_layer))
                        feature3d=self.input_layer.getFeatures(QgsFeatureRequest(expression, context))
                        
                        for feat in feature3d: 
                            # print("text", feat.id())
                            pt = feat.geometry().centroid().asPoint()
                            point_geom= QgsGeometry.fromPointXY(QgsPointXY(pt))
                            name="Feature_Split POL_ID Unique"
                            dctErrPnts[feat .id()] = [point_geom, self.input_layer.name(),name]
                
                


            for ids, feats in dctErrPnts.items():  # pntGeom = QgsGeometry().fromPointXY(iter[0])
                    # print("dctErrPnts",dctErrPnts)
                    # print("ids",ids)
                    # print('feats',feats)
                    self.updateErrorPointFeatures([ids, feats[1],feats[2]], feats[0])
            if len(dctErrPnts) > 0:
                QgsProject.instance().addMapLayer(vMemorylayer)
                layerData.addFeatures(self.errorPointFeatures)
                vMemorylayer.commitChanges()
                QMessageBox.information(None, ' RIL building error', 'Process completed. Error layer added')
            else:
                QMessageBox.information(None, ' RIL building error', 'Process completed. No error found')
                pass  
        
        '''Case 7   &  8''' 
        '''2D & 3D Group ID + RJID Apply "VLOOKUP" and check error (Ril Additional & Unmapped is valid in this case)'''
        '''RIL Additional Intersect with 3D RIL check'''
        
        current_layer2d=self.dlg.comboBox_4.currentText()
        for layer in self.layer:
            layer_name=layer.name()
            if current_layer2d==layer_name:
                self.input_layer2d=layer
        self.input_layer2d.startEditing()
        # count=self.input_layer2d.selectedFeatureCount()
        # if count<=0 :
        #     QMessageBox.information(self.dlg, "Info"," Please select the features")
        #     return
        
        current_layer3d=self.dlg.comboBox_5.currentText()
        for layer in self.layer:
            layer_name=layer.name()
            if current_layer3d==layer_name:
                self.input_layer3d=layer
        self.input_layer3d.startEditing()
        # count=self.input_layer3d.selectedFeatureCount()
        # if count<=0 :
        #     QMessageBox.information(self.dlg, "Info"," Please select the features")
        #     return
        self.errorPointFeatures = []
        uri = "Point?crs=" + self.input_layer2d.crs().authid()
        # uri = "Point?crs=" + self.orignle_layer.crs().authid()
        vMemorylayer = QgsVectorLayer(uri, " RIL building error", "memory")
        vMemorylayer.startEditing()
        layerData = vMemorylayer.dataProvider()
        layerData.addAttributes([QgsField("Fid", QVariant.String), QgsField("layer name", QVariant.String), QgsField("Error name", QVariant.String)])
        dctErrPnts = defaultdict()
        rjid_2dlist=[]

        '''Case 7 '''
        if self.dlg.checkBox_7.isChecked() == True:
            for o_feature in self.input_layer2d.getFeatures():
                pt = o_feature.geometry().centroid().asPoint()
                point_geom= QgsGeometry.fromPointXY(QgsPointXY(pt))
                rj_id_2d=o_feature['BUILDING_R']
                GID_2d=o_feature['GROUP_ID']
                # print("RJ_ID2d",rj_id_2d)
                # print("gid2d",GID_2d)
                field_name = "BUILDING_R"
                filter_value = str (rj_id_2d)
                expression = QgsExpression(f'"{field_name}" = \'{filter_value}\'')
                context = QgsExpressionContext()
                context.appendScopes(QgsExpressionContextUtils.globalProjectLayerScopes(self.input_layer3d))
                feature3d=self.input_layer3d.getFeatures(QgsFeatureRequest(expression, context))
                
                for feat in feature3d: 
                    # print("len",len(feat))
                    group_id_3d=(feat['group_id'])
                    RJID_3d=(feat['BUILDING_R'])
                    # print("gid3d",group_id_3d)
                    # print("RJID3d",  RJID_3d)
                    if group_id_3d != GID_2d:
                        name="GID not same 2D along 3D"
                        dctErrPnts[o_feature .id()] = [point_geom, self.input_layer2d.name(),name]
                    # if rj_id_2d!=RJID_3d:
                    #     name="RJID not same 2D along 3D"
                    #     dctErrPnts[feature .id()] = [point_geom, self.input_layer2d.name(),name]
                field_name_R = "BUILDING_R"
                filter_value_R = str (rj_id_2d)
                expression_R = QgsExpression(f'"{field_name_R}" = \'{filter_value_R}\'')
                context_R = QgsExpressionContext()
                context_R.appendScopes(QgsExpressionContextUtils.globalProjectLayerScopes(self.input_layer3d))
                feature3d_R=self.input_layer3d.getFeatures(QgsFeatureRequest(expression_R, context_R))
                for feat in feature3d_R: 
                    group_id_3d=(feat['group_id'])
                    RJID_3d=(feat['BUILDING_R'])
                    if rj_id_2d!=RJID_3d:
                        name="RJID not same 2D along 3D"
                        dctErrPnts[feature .id()] = [point_geom, self.input_layer2d.name(),name]

        '''Case 8 '''
        if self.dlg.checkBox_8.isChecked() == True or  self.dlg.checkBox_9.isChecked() == True or self.dlg.checkBox_10.isChecked() == True :
            for feature in  self.input_layer2d.selectedFeatures():
                pt = feature.geometry().centroid().asPoint()
                point_geom= QgsGeometry.fromPointXY(QgsPointXY(pt))
                remark_2d=feature['REMARK']
                remark_2d=feature['REMARK']
                tag2d=feature["TAG"]
                
                for feat in  self.input_layer3d.selectedFeatures():
                    pt3d = feat.geometry().centroid().asPoint()
                    point_geom3d= QgsGeometry.fromPointXY(QgsPointXY(pt3d))
                    
                    if self.dlg.checkBox_8.isChecked() == True:
                        if remark_2d=="RIL Additional":
                            remark_2d=feature['REMARK']
                            # print(" remark_2d", remark_2d)
                            if feature.geometry().intersects(feat.geometry()):
                                print("intersect")
                                name="2D RIL Intersect with 3D Algined"
                                dctErrPnts[feature .id()] = [point_geom, self.input_layer2d.name(),name]
                    
                tag3d=feat["TAG"]
                # print("t",tag)
                if self.dlg.checkBox_9.isChecked() == True:
                    if tag=="New":
                        if feat.geometry().intersects(feature.geometry()):
                            name="3D New interstct 2d BLDG"
                            dctErrPnts[feat .id()] = [point_geom3d, self.input_layer3d.name(), name]
                if self.dlg.checkBox_10.isChecked() == True:
                    if tag3d=="New_1" and tag2d=="Overlap":
                        # print("new-1 and Overlap")
                        if feat.geometry().intersects(feature.geometry()):
                            pass
                        else:
                            name="3D New_1 interstct 2d Overlap BLDG"
                            dctErrPnts[feat .id()] = [point_geom3d, self.input_layer3d.name(), name]
        '''Case 11'''
        '''dissolve case compare GID, RJID  '''
        if self.dlg.checkBox_12.isChecked() == True:
            for feature in  self.input_layer2d.selectedFeatures():
                pt = feature.geometry().centroid().asPoint()
                point_geom= QgsGeometry.fromPointXY(QgsPointXY(pt))
                GID_2d=feature["GROUP_ID"]
                # print("GID",GID_2d)
                RJID_2d=feature["BUILDING_R"]
                # print("rjid",RJID_2d)
                field_name_R = "GROUP_ID"
                filter_value_R = str (GID_2d)
                expression_R = QgsExpression(f'"{field_name_R}" = \'{filter_value_R}\'')
                context_R = QgsExpressionContext()
                context_R.appendScopes(QgsExpressionContextUtils.globalProjectLayerScopes( self.input_layer3d))
                feature3d_R= self.input_layer3d.getFeatures(QgsFeatureRequest(expression_R, context_R))
                for feat in feature3d_R: 
                    group_id_3d=(feat['group_id'])
                    # print(" group_id_3d", group_id_3d)
                    RJID_3d=(feat['BUILDING_R'])
                    if RJID_2d!=RJID_3d:
                        name="RJID not same 2D along dissove"
                        dctErrPnts[feature .id()] = [point_geom, self.input_layer2d.name(),name]
                field_name_R = "BUILDING_R"
                filter_value_R = str ( RJID_2d)
                expression_R = QgsExpression(f'"{field_name_R}" = \'{filter_value_R}\'')
                context_R = QgsExpressionContext()
                context_R.appendScopes(QgsExpressionContextUtils.globalProjectLayerScopes( self.input_layer3d))
                feature3d_R= self.input_layer3d.getFeatures(QgsFeatureRequest(expression_R, context_R))
                for feat in feature3d_R: 
                    group_id_3d=(feat['group_id'])
                    # print(" group_id_3d", group_id_3d)
                    RJID_3d=(feat['BUILDING_R'])
                    if GID_2d != group_id_3d :
                        name="GID not same 2D along dissove"
                        dctErrPnts[feature .id()] = [point_geom, self.input_layer2d.name(),name]

        for ids, feats in dctErrPnts.items():  # pntGeom = QgsGeometry().fromPointXY(iter[0])
                    # print("dctErrPnts",dctErrPnts)
                    # print("ids",ids)
                    # print('feats',feats)
                    self.updateErrorPointFeatures([ids, feats[1],feats[2]], feats[0])
        if len(dctErrPnts) > 0:
            QgsProject.instance().addMapLayer(vMemorylayer)
            layerData.addFeatures(self.errorPointFeatures)
            vMemorylayer.commitChanges()
            QMessageBox.information(None, ' RIL building error', 'Process completed. Error layer added')
        else:
            QMessageBox.information(None, ' RIL building error', 'Process completed. No error found')
            pass 

        
            

    


    def find_cases_2 (self):
        # from qgis.core import QgsFeatureRequest
        aligned_layer=self.dlg.comboBox_1.currentText()
        for layer in self.layer:
            layer_name=layer.name()
            if aligned_layer==layer_name:
                self.aligned_layer=layer
        self.input_layer=self.aligned_layer
        self.aligned_layer.startEditing()
        a_count=self.aligned_layer.selectedFeatureCount()
        # if a_count<=0 :
        #     QMessageBox.information(self.dlg, "Info"," Please select the features")
        #     return
        orignle_layer=self.dlg.comboBox_2.currentText()
        for layer in self.layer:
            layer_name=layer.name()
            if orignle_layer==layer_name:
                self.orignle_layer=layer
        self.orignle_layer.startEditing()
        o_count=self.orignle_layer.selectedFeatureCount()
        # if a_count<=0 and o_count<=0 :
        #     QMessageBox.information(self.dlg, "Info"," Please select the features")
        #     return
        self.new_layer()
        dctErrPnts = defaultdict()
        polygon_id_aligned=[]
        group_id_aligned=[]
        rj_id_aligned=[]
        polygon_id_orignale=[] 
        group_id_orignale=[]  
        rj_id_orignale=[]  
        feata=[]  
        # i=0
        # for o_feature in self.orignle_layer.selectedFeatures():
        #     polygon_id_orignale.append(o_feature['polygon_id'])
        # print("pido", polygon_id_orignale)
        # for pido in polygon_id_orignale :
        #     attribute_name = "polygon_id"
        #     variable_value = (pido)  # Replace with your desired integer value
        #     attribute_expression = f'"{attribute_name}" = {variable_value}'
        #     feature_alg= self.aligned_layer.getFeatures(QgsFeatureRequest().setFilterExpression(attribute_expression))
        #     print("f a1",feature_alg)
        #     print(type(feature_alg))
        #     for feat in feature_alg :
        #         print("text",feat)
        #         polygon_id_aligned=(feat['polygon_id'])
        #         group_id_aligned=(feat['group_id'])
        #         print("pida",polygon_id_aligned)
        #         print("gda",group_id_aligned)

        for o_feature in self.orignle_layer.selectedFeatures():
            group_id_orignale=o_feature['GROUP_ID']
            print("gido",group_id_orignale)
            # for i in group_id_orignale:
            attribute_name2 = "GROUP_ID"
            variable_value2 = group_id_orignale
            attribute_expression2 = f'{attribute_name2} = "{variable_value2}"'
            feature_alg2= [f for f in self.aligned_layer.getFeatures(QgsFeatureRequest().setFilterExpression(attribute_expression2))]
            print("f a2",feature_alg2)
            print(type(feature_alg2))
            for feat in feature_alg2 :
                print("text1",feat)
                polygon_id_aligned=(feat['polygon_id'])
                group_id_aligned=(feat['group_id'])
                print("pida1",polygon_id_aligned)
                print("gda1",group_id_aligned)





            # o_feat=o_feature
            # print("feature", o_feature)
            # polygon_id_orignale=(o_feature['polygon_id'])
            # # request = QgsFeatureRequest().setFilterExpression( '"POLYGONE_ID" = \'polygon_id_orignale\'' )
            # # featuresa  = self.aligned_layer.getFeatures( request )
            # # # polygon_id_aligned.append(featuresa['polygon_id'])
            # # for feat in featuresa :
            # #     print("pid",feat)
            
            # request = QgsFeatureRequest()
            # request = request.setFilterExpression('"' + self.aligned_layer['polygon_id'] + '"  LIKE \'' + polygon_id_orignale + '\'')
            # for f in self.aligned_layer.getFeatures(request):
            #     print("f",f)

            

            # Assume 'layer' is your QgsVectorLayer object and 'field_name' is the name of the field
            # field_name = 'polygone_id'
            # value = int(polygon_id_orignale)
            # print("f v", value)

            # # Create the feature request
            # request = QgsFeatureRequest().setFilterExpression(f'"{field_name}" = \'{value}\'')
            # # Define the attribute expression for selection using the LIKE operator
            # attribute_expression = '"attribute_name" LIKE \'%value%\''
            # # Get the features that match the attribute expression
            # selected_features = self.aligned_layer.getFeatures(QgsFeatureRequest().setFilterExpression(attribute_expression))
            # print(selected_features)

            # # Iterate over the features in the layer
            # for feature in self.aligned_layer.getFeatures(attribute_expression):
            #     print("text")
            # # If the field is of integer type, use the following expression instead
            # # request = QgsFeatureRequest().setFilterExpression(f'"{field_name}" = {filter_value}')

            # # Retrieve the filtered features from the layer
            # filtered_features = [feat for feat in self.aligned_layer.getFeatures(request)]
            # print(filtered_features)

            # # Do something with the filtered features
            # for feature in filtered_features:
            #     # Process the feature as needed
            #     print(feature.attributes())
            # print("featuresa",featuresa)
            # for f in self.aligned_layer.getFeatures(request):
            #     print("text")
            # for fields in o_feature.fields():
            #     polygon_id_orignale.append( str(o_feature['POLYGONE_ID']))
            #     # group_id_orignale.append(o_feature['GROUP_ID'])
            #     # rj_id_orignale.append(o_feature['BUILDING_R'])
            # for a_feature in self.aligned_layer.selectedFeatures():
            #     for fields in a_feature.fields():
            #         polygon_id_aligned=str(a_feature['POLYGONE_ID'])
            #         # group_id_aligned=(a_feature['GROUP_ID'])
            #         # rj_id_aligned=(a_feature['BUILDING_R'])
            #         if polygon_id_aligned in polygon_id_orignale:
            #             print("exist")
            #             pass
            #         else:
            #             print("pida",polygon_id_aligned)

           
            # polygon_id_orignale=(str(o_feature['polygon_id']))
            # request = QgsFeatureRequest()
            # request = request.setFilterExpression(
            # '"' + self.data['DLHI_5_R2_Part2_3D_ALIGNED_BLDG']['POLYGONE_ID'] + '"  LIKE \'' + str(polygon_id_orignale) + '\'')
            # feat_id_list = [f.id() for f in self.aligned_layer.getFeatures(request)]
            # print(feat_id_list)
            # featuresa = self.aligned_layer.getFeatures('"POLYGONE_ID" = \'134217\'')
            # request = QgsFeatureRequest().setFilterExpression( '"POLYGONE_ID" = \'polygon_id_orignale\'' )
            # request = QgsFeatureRequest().setFilterExpression( '"POLYGONE_ID" = \'polygon_id_orignale\'' )
            # feat_id_list = [f.id() for f in self.aligned_layer.getFeatures(request)]
            # for f in self.aligned_layer.getFeatures(request):
            #     print("text")
            # featuresa  = self.aligned_layer.getFeatures( request )
            # print(feat_id_list)
            # feata=QgsFeature(featuresa)
            # polygon_id_aligned=(feata['POLYGONE_ID'])
            # print("134217",featuresa)
            # for feat in featuresa:
            #     print("test")
            #     print("in",feat.id())
            #     polygon_id_aligned.append(feat['POLYGONE_ID'])
        
        # polygon_id_aligned=featuresa['POLYGONE_ID']
        # # group_id_aligned=(str(featuresa['group_id']))
        # # rj_id_aligned=(str(featuresa['building_r']))
        # print("orignle" ,len(polygon_id_orignale))
        # print("aligned" ,polygon_id_aligned)
        # print("aligned" , group_id_aligned )
        # print("aligned"  ,rj_id_aligned)
            # group_id_orignale.append(str(o_feature['group_id']))
            # rj_id_orignale.append(str(o_feature['building_r']))
            # pt = o_feature.geometry().centroid().asPoint()
            # point_geom= QgsGeometry.fromPointXY(QgsPointXY(pt))
            # print(point_geom)
            # for o_fields in o_feature.fields():
            #     o_field_name=str(o_fields.name())
            #     o_fields_name=o_field_name.lower()
        # for a_feature in self.aligned_layer.getFeatures():
        #     # feat=a_feature
        #     polygon_id_aligned.append(str(a_feature['polygon_id']))
        #     group_id_aligned.append(str(a_feature['group_id']))
        #     rj_id_aligned.append(str(a_feature['building_r']))
            
        #     pt = a_feature.geometry().centroid().asPoint()
        #     point_geom= QgsGeometry.fromPointXY(QgsPointXY(pt))
        #     # print(point_geom)
        #     for a_fields in a_feature.fields():
        #         a_field_name=str(a_fields.name())
        #         a_fields_name=a_field_name.lower()
        #         
        # print("aligned" ,polygon_id_aligned)
        # print("aligned" , group_id_aligned )
        # print("aligned"  ,rj_id_aligned)

        
                
        
        # print("orignle" , group_id_orignale)
        # print("orignle"  ,rj_id_orignale)

        # '''Case 5'''  
        # '''Compare ALIGNED_BLDG (Polygon ID + Group ID + RJID) to 3D_ORIGINAL_BLDG (Polygon ID + Group ID + RJID)
        # '''  
        # if self.dlg.checkBox_4.isChecked() == True:
        #     countA=len(polygon_id_aligned)
        #     for i in range(countA):
        #         pida=polygon_id_aligned[i]
        #         if pida in polygon_id_orignale:
        #             print("exist")
        #             pass
        #         else:
        #             print("pida",pida)
            #     countO=len(polygon_id_orignale)
            # for j in range(countO+1):
            #     pido=polygon_id_orignale[j]
            # if pida!=pido:
            #     print("pido",pido)
            #     print("pida",pida)
            #     #     j+=1
            #     # i+=1

            
            # if polygon_id_aligned!=polygon_id_orignale :
            #     # print("not same p")
            #     name="Polygone id not same  "
            #     dctErrPnts[feat.id()] = [point_geom, self.input_layer.name(),name]
            # if group_id_aligned !=group_id_orignale:
            #     # print("not same g")
            #     name="Group id not same  "
            #     dctErrPnts[feat.id()] = [point_geom, self.input_layer.name(),name]
            # if  rj_id_aligned!=rj_id_orignale :
            #     # print("not same r")
            #     name="Rj id not same  "
            #     dctErrPnts[feat.id()] = [point_geom, self.input_layer.name(),name]
                        
        
        
    def new_layer(self):
        self.errorPointFeatures = []
        uri = "Point?crs=" + self.input_layer.crs().authid()
        # uri = "Point?crs=" + self.orignle_layer.crs().authid()
        vMemorylayer = QgsVectorLayer(uri, " RIL building error", "memory")
        vMemorylayer.startEditing()
        layerData = vMemorylayer.dataProvider()
        layerData.addAttributes([QgsField("Fid", QVariant.String), QgsField("layer name", QVariant.String), QgsField("Error name", QVariant.String)])
        dctErrPnts = defaultdict()

    def updateErrorPointFeatures(self, attrList, point):
        # print("attrilist",attrList)
        # print("error",error)
        # print("point",point)
        newfeat = QgsFeature()
        newfeat.setAttributes(attrList)
        newfeat.setGeometry(point)
        self.errorPointFeatures.append(newfeat)