# -*- coding: utf-8 -*-
"""
/***************************************************************************
 POIImportTool
                                 A QGIS plugin
 import vendar data in db
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-10-31
        git sha              : $Format:%H$
        copyright            : (C) 2023 by genesys
        email                : pramoddb@email.igenesys.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import *
from qgis.PyQt.QtGui import *
from qgis.PyQt.QtWidgets import *
from qgis.core import *
from qgis.gui import *
from qgis.utils import *
from PyQt5.QtWidgets import *

import sys
import os
import json
import os.path
import psycopg2
import processing

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .poi_import_tool_dialog import POIImportToolDialog
import os.path


class POIImportTool:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface

        self.tool = None
        self.db = None
        self.portnum = None
        self.ip = None
        self.user = None
        self.currentDirectoryPath = None
        self.path = 'DatabaseConnection.ini'
        self.apppath = os.path.dirname(os.path.realpath(__file__))
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'POIImportTool_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&POI Import Tool')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None
        self.dlg = POIImportToolDialog()
        self.loadSetting()

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('POIImportTool', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/poi_import_tool/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'POI Import Tool'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True
        self.dlg.pushButton_2.clicked.connect(self.onCancelClick)
        self.dlg.stackedWidget.setCurrentIndex(0)
        self.dlg.btnConnect.clicked.connect(self.stackchanged)
        self.dlg.pushButton.clicked.connect(self.import_into_postgis)


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&POI Import Tool'),
                action)
            self.iface.removeToolBarIcon(action)

    def TestConnection(self):
        flag = False
        try:
            conn = psycopg2.connect(database=self.databas, user=self.userid, password=self.pwd, host=self.host,
                                    port=int(self.port))
            flag = True

        except Exception as e:
            flag = False
            self.dbError = str(e)
        finally:
            return flag


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            # self.dlg = POIImportToolDialog()
            self.dlg.cb.currentIndexChanged.connect(self.set_schema)
            self.dlg.cb2.currentIndexChanged.connect(self.set_table)

        # show the dialog
        self.dlg.show()
        self.dlg.show()
        
        self.dlg.progressBar.hide()
        self.dlg.stackedWidget.setCurrentIndex(0)
        self.dlg.txtHost.setText(str(self.ip))
        self.dlg.txtUsername.setText(str(self.user))
        self.dlg.txtPort.setText(str(self.portnum))
        self.dlg.txtDatabaseName.setText(str(self.db))
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
    
    def onCancelClick(self):
        self.dlg.reject()

    def addlayers(self):
        self.layer=QgsProject.instance().mapLayers().values()
        self.dlg.seltype.clear()
        self.dlg.seltype.addItems([layer.name() for layer in self.layer]) 
        self.current_layer = self.dlg.seltype.currentText()
        for lyr in self.layer:
            layers_name = lyr.name()
            if self.current_layer == layers_name:
                # print("layers_name",layers_name)
                self.layar  = lyr
    
    def add_schema(self):
        schema_lst=self.get_schema()
        self.dlg.cb.clear()
        self.dlg.cb.addItems(schema_lst)
    def set_schema(self):
        self.schema=self.dlg.cb.currentText()
        self.add_schema_table()
        print("self.schema",self.schema)
    def add_schema_table(self):
        schema_lst=self.get_schema_table()
        self.dlg.cb2.clear()
        self.dlg.cb2.addItems(schema_lst)
    def set_table(self):
        self.table=self.dlg.cb2.currentText()
        print("self.table",self.table)
    
    def get_schema(self):
        schemaList=[]
        # sql = "select * from information_schema.schemata where schema_name not like 'pg_%' and schema_name <>'information_schema' order by schema_name;"
        # sql = "select * from information_schema.schemata where schema_name not like 'p%' and schema_name NOT LIKE 'i%' and schema_name NOT LIKE 'm%' and schema_name <>'information_schema' order by schema_name;"
        sql="select * from information_schema.schemata  order by schema_name"
        # self.cursor.execute(sql)
        isExecute, rows, sException_reson = self.sql_FeachRecords(sql)
        # self.conn.close()
        self.cursor = None
        if isExecute == False:
            QMessageBox.information(self.dlg, 'Get Schemas',
                                    "Unable to fetch Schemas from database:-" + str(sException_reson))
        else:
            for row in rows:
                schemaList.append(row[1])
            # print("schemaList", schemaList)
            return schemaList
        # print("schemaList", schemaList)
        pass
    def sql_FeachRecords(self,sql,isCommit = False ,isSilent = True,isCloseConn = True):
        isExecute = False
        sException_reson = None
        cur =None
        rows =None
        QgsMessageLog.logMessage("Query :- " + str(sql), "pgSetting",Qgis.Info)
        # cur = self.cursor
        try:
            # print("sql",sql)
            self.cursor = self.conn.cursor()
            self.cursor.execute(sql)
            if isCommit == True:
                self.conn.commit()
            rows = self.cursor.fetchall()
            # print("row f",rows)
            isExecute = True
        except Exception as e:
            sException_reson = str(sys.exc_info())
            if isSilent== False:
                QMessageBox.information(self.dlg, 'schema', "Unable to Feach Records Query reason:-" + str(sys.exc_info()))
            QgsMessageLog.logMessage("Unable to Feach Records Query reason :-" + str(e), "Schema",Qgis.Info)
            isExecute = False
        finally:
            if isCloseConn == True:
                # self.conn.close()
                self.cursor = None
        return isExecute,rows,sException_reson  
    def get_schema_table(self):
        schemaList=[]
        # sql = "select * from information_schema.schemata where schema_name not like 'pg_%' and schema_name <>'information_schema' order by schema_name;"
        # sql = "select * from information_schema.schemata where schema_name not like 'p%' and schema_name NOT LIKE 'i%' and schema_name NOT LIKE 'm%' and schema_name <>'information_schema' order by schema_name;"
        sql=f"select distinct table_name from information_schema.tables where table_schema='{self.schema}'"
        # self.cursor.execute(sql)
        isExecute, rows, sException_reson = self.sql_Feachtable(sql)
        # self.conn.close()
        self.cursor = None
        if isExecute == False:
            QMessageBox.information(self.dlg, 'Get Schemas',
                                    "Unable to fetch Schemas from database:-" + str(sException_reson))
        else:
            for row in rows:
                schemaList.append(row[0])
            # print("schemaList", schemaList)
            return schemaList
        # print("schemaList", schemaList)
        pass
    def sql_Feachtable(self,sql,isCommit = False ,isSilent = True,isCloseConn = True):
        isExecute = False
        sException_reson = None
        cur =None
        rows =None
        QgsMessageLog.logMessage("Query :- " + str(sql), "pgSetting",Qgis.Info)
        # cur = self.cursor
        try:
            # print("sql",sql)
            self.cursor = self.conn.cursor()
            self.cursor.execute(sql)
            if isCommit == True:
                self.conn.commit()
            rows = self.cursor.fetchall()
            # print("row f",rows)
            isExecute = True
        except Exception as e:
            sException_reson = str(sys.exc_info())
            if isSilent== False:
                QMessageBox.information(self.dlg, 'schema', "Unable to Feach Records Query reason:-" + str(sys.exc_info()))
            QgsMessageLog.logMessage("Unable to Feach Records Query reason :-" + str(e), "Schema",Qgis.Info)
            isExecute = False
        finally:
            if isCloseConn == True:
                # self.conn.close()
                self.cursor = None
        return isExecute,rows,sException_reson 
    


    def stackchanged(self):
        # self.getConnection()
        if self.getConnection():
            self.type_poi = 'poi'
            # self.type_navigation = self.data['csv_dropdown_types']['navigation']
            self.dlg.stackedWidget.setCurrentIndex(1)
            self.addlayers()
            self.add_schema()
            # self.add_schema_table()
            # self.dlg.seltype.clear()
            # self.dlg.seltype.addItems(
            #     [self.type_poi ])
            # self.dlg.seltype.setCurrentIndex(-1)
            self.dlg.pushButton.setEnabled(True)
    
    def getConnection(self):
        self.host = self.dlg.txtHost.text()
        self.port = self.dlg.txtPort.text()
        self.userid = self.dlg.txtUsername.text()
        self.pwd = self.dlg.txtPassword.text()
        self.databas = self.dlg.txtDatabaseName.text()
        # self.schem = self.dlg.txtschema.text()

        # ---Host-----
        if (self.host) == '':
            QMessageBox.critical(self.dlg, "Error", "Please enter host")
            self.dlg.txtHost.setFocus()
        elif (self.host).strip() == '':
            QMessageBox.critical(self.dlg, "Error", "Please enter valid host")
            self.dlg.txtHost.clear()
            self.dlg.txtHost.setFocus()
        # ---Port-----
        elif (self.port) == '':
            QMessageBox.critical(self.dlg, "Error", "Please enter port")
            self.dlg.txtPort.setFocus()
        elif (self.port).strip() == '':
            QMessageBox.critical(self.dlg, "Error", "Please enter valid port")
            self.dlg.txtPort.clear()
            self.parent.dlg.txtPort.setFocus()
        # ---Port-----
        elif (self.databas) == '':
            QMessageBox.critical(self.dlg, "Error", "Please enter Database Name")
            self.dlg.txtDatabaseName.setFocus()
        elif (self.databas).strip() == '':
            QMessageBox.critical(self.dlg, "Error", "Please enter valid Database Name")
            self.dlg.txtDatabaseName.clear()
            self.dlg.txtDatabaseName.setFocus()
        # ---UserName-----
        elif (self.userid) == '':
            QMessageBox.critical(self.dlg, "Error", "Please enter Username")
            self.dlg.txtUsername.setFocus()
        elif (self.userid).strip() == '':
            QMessageBox.critical(self.dlg, "Error", "Please enter valid Username")
            self.dlg.txtUsername.clear()
            self.dlg.txtUsername.setFocus()
        # ---Password-----
        elif (self.pwd).strip() == '':
            QMessageBox.critical(self.dlg, "Error", "Please enter password")
            self.dlg.txtPassword.clear()
            self.dlg.txtPassword.setFocus()
        elif (self.TestConnection()):
            # print "connection Success"
            self.storeSetting(True)
            self.connectionFlag = True
            self.conn = None
            # QMessageBox.information(self.dlg, "Result", 'Connection Successful')
            # self.objDataInsert.showUi()
        else:
            self.storeSetting(False)
            # print "connection Failed"
            self.connectionFlag = False
            QMessageBox.critical(self.dlg, "Error", self.dbError)

        self.data = {}
        path = os.path.join(self.plugin_dir, "AppConfig.json")
        try:
            if os.path.exists(path):
                with open(path) as json_file:
                    self.data = json.load(json_file)
                pass

            pass
        except Exception as e:
            err1 = "unable read data:-\n" + str(e)
            QMessageBox.information(self.dlg, "Error", err1)
            pass
        pass

        if True:
            try:
                self.conn = psycopg2.connect(database=self.databas,
                                             user=self.userid, password=self.pwd,
                                             host=self.host,
                                             port=int(self.port))
                QMessageBox.information(self.dlg, 'Connection Successfull', "Database Connected Successfully")
                return True

            except Exception as e:
                QMessageBox.information(self.dlg, 'Error', "Invalid Database connection ")
                return False
    
    def storeSetting(self, status):
        if (len(str(self.path).strip()) > 0):
            # store path for next time
            QgsMessageLog.logMessage("Selected ini path2 = " + str(self.path), "Database")
            import configparser
            import string
            # config = configparser.SafeConfigParser()
            config = configparser.ConfigParser()
            config.readfp(open(os.path.join(self.apppath, self.path)))
            # config.read_file(open(os.path.join(self.apppath, self.path)))
            # print status
            if (status):
                config.set("pgDatabase", "IP", self.host)
                config.set("pgDatabase", "port", self.port)
                config.set("pgDatabase", "dbname", self.databas)
                config.set("pgDatabase", "userid", self.userid)
                pass
            else:
                config.remove_option("pgDatabase", "IP")
                config.remove_option("pgDatabase", "port")
                config.remove_option("pgDatabase", "dbname")
                config.remove_option("pgDatabase", "userid")
                pass

            with open(os.path.join(self.apppath, self.path), 'w') as configfile:  # save
                config.write(configfile)
        pass

    def loadSetting(self):
        if (len(str(self.path).strip()) > 0):
            # store path for next time
            QgsMessageLog.logMessage("Selected ini path2 = " + str(self.path), "Database")
            import configparser
            import string
            config = configparser.ConfigParser()
            config.readfp(open(os.path.join(self.apppath, self.path)))
            IsExistSection = False
            iniDatabaseSetting = None
            for section in config.sections():
                # print (section)

                if (str.lower(section) == str.lower("pgDatabase")):
                    iniDatabaseSetting = {"IP": "", "port": "", "dbname": "", "userid": "", "pwd": "", "IsEmpty": ""}
                    iniDatabaseSetting["IsEmpty"] = True
                    options = config.options(section)
                    for option in options:
                        optionValue = ""
                        try:
                            optionValue = config.get(section, option)

                        except:
                            QgsMessageLog.logMessage('occur while reading ini file', "Database")
                            # dict1[option] = None

                        if (len(str(optionValue).strip()) > 0):
                            if (str.lower(option) == str.lower("IP")):
                                iniDatabaseSetting["IP"] = optionValue
                                iniDatabaseSetting["IsEmpty"] = False
                            elif (str.lower(option) == str.lower("Port")):
                                iniDatabaseSetting["port"] = optionValue
                                iniDatabaseSetting["IsEmpty"] = False
                            elif (str.lower(option) == str.lower("dbname")):
                                iniDatabaseSetting["dbname"] = optionValue
                                iniDatabaseSetting["IsEmpty"] = False
                            elif (str.lower(option) == str.lower("Userid")):
                                iniDatabaseSetting["userid"] = optionValue
                                iniDatabaseSetting["IsEmpty"] = False
            if (iniDatabaseSetting is None):
                self.ip = ""
                self.portnum = ""
                self.db = ""
                self.user = ""
                return False
            elif (iniDatabaseSetting["IsEmpty"] == True):
                self.ip = ""
                self.portnum = ""
                self.db = ""
                self.user = ""
                return False

            self.ip = str(iniDatabaseSetting["IP"]).strip()
            self.portnum = str(iniDatabaseSetting["port"]).strip()
            self.db = str(iniDatabaseSetting["dbname"]).strip()
            self.user = str(iniDatabaseSetting["userid"]).strip()
            return True
        else:
            QMessageBox.information(None, 'reading ini file', "selected ini file is empty")
        return False
    
    def import_into_postgis(self):
        print("123456")
        '''main'''
        # PARAMETERS = {'INPUT':'E:/Genesys/Pramoddb/PYQGIS_ITD/QGIS_ITD_TOOL/Wonobo/poi import tool/Genesys_POI_Template_Schema/Genesys_POI.shp',
        #   'DATABASE':'traning_db','SCHEMA':'Genesys_POI','TABLENAME':'genesys_poi','PRIMARY_KEY':'OBJECTID',
        #   'GEOMETRY_COLUMN':'geom','ENCODING':'UTF-8','OVERWRITE':True,'CREATEINDEX':True,'LOWERCASE_NAMES':True,
        #   'DROP_STRING_LENGTH':False,'FORCE_SINGLEPART':False}
        # processing.run("qgis:importintopostgis", PARAMETERS)
        PARAMETERS = {'INPUT':self.layar,
          'DATABASE':self.databas,'SCHEMA':self.schema,'TABLENAME':self.table,'PRIMARY_KEY':'OBJECTID',
          'GEOMETRY_COLUMN':'geom','ENCODING':'UTF-8','OVERWRITE':True,'CREATEINDEX':True,'LOWERCASE_NAMES':True,
          'DROP_STRING_LENGTH':False,'FORCE_SINGLEPART':False}
        
        # processing.run("native:importintopostgis", PARAMETERS)
        # processing.run("gdal:importvectorintopostgisdatabaseavailableconnections", PARAMETERS)
        processing.run("qgis:importintopostgis", PARAMETERS)
        print("6789")



        '''
        { 'CREATEINDEX' : True, 'DATABASE' : 'traning_db', 'DROP_STRING_LENGTH' : False, 'ENCODING' : 'UTF-8', 
        'FORCE_SINGLEPART' : False, 'GEOMETRY_COLUMN' : 'geom', 
        'INPUT' : 'E:/Genesys/Pramoddb/PYQGIS_ITD/QGIS_ITD_TOOL/Wonobo/poi import tool/Genesys_POI_Template_Schema/Genesys_POI.shp', 
        'LOWERCASE_NAMES' : True, 'OVERWRITE' : True, 'PRIMARY_KEY' : 'OBJECTID', 'SCHEMA' : 'Genesys_POI',
          'TABLENAME' : 'genesys_poi' }


          processing.run("native:importintopostgis", 
          {'INPUT':'E:/Genesys/Pramoddb/PYQGIS_ITD/QGIS_ITD_TOOL/Wonobo/poi import tool/Genesys_POI_Template_Schema/Genesys_POI.shp',
          'DATABASE':'traning_db','SCHEMA':'Genesys_POI','TABLENAME':'genesys_poi','PRIMARY_KEY':'OBJECTID',
          'GEOMETRY_COLUMN':'geom','ENCODING':'UTF-8','OVERWRITE':True,'CREATEINDEX':True,'LOWERCASE_NAMES':True,
          'DROP_STRING_LENGTH':False,'FORCE_SINGLEPART':False})
        
        '''