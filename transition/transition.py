# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Transitions
                                 A QGIS plugin
 Creation of transition
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-10-21
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Nikhil
        email                : nikhilja@email.igenesys.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import *
from qgis.PyQt.QtGui import *
from qgis.PyQt.QtWidgets import *

from qgis.core import *

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .transition_dialog import TransitionsDialog
import os.path
import psycopg2

from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5 import QtGui
from qgis.gui import *
from qgis.core import *
from qgis.utils import *
from qgis.PyQt.QtGui import QColor, QIcon, QBrush
from PyQt5 import QtCore
import qgis
import json
import sys


class Transitions:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # self.layer = self.iface.activeLayer()
        
        #QgsMapToolEdit.__init__(self, self.iface.mapCanvas())
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'Transitions_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Transition')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None
        self.layer=None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('Transitions', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/transition/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'creation of transitions'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True
        self.loadData()
        self.iface.layerTreeView().currentLayerChanged.connect(self.layer_selection_changed)
        

        #QShortcut(QKeySequence("Ctrl+P"), self.iface.mainWindow()).activated.connect(self.first_lane_poly)
        # shortcut = QShortcut(QKeySequence(Qt.ControlModifier + Qt.ShiftModifier + Qt.Key_Y), self.iface.mainWindow())
        # shortcut.setContext(Qt.ApplicationShortcut)
        # shortcut.activated.connect(self.first_lane_poly)

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Transition'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = TransitionsDialog(self)
            self.dlg.pushButton.clicked.connect(self.create_transation)
            self.dlg.segment.clicked.connect(self.create_segment)
            self.dlg.cancel.clicked.connect(self.close)
            self.dlg.Set_Schema.clicked.connect(self.set_schema)
            
        
        self.variable = ''
        self.multiple_var=[]
        lane_class_2=''
        lane_class_1=''
        self.TestConnection()
        self.dlg.setWindowFlags(Qt.WindowStaysOnTopHint)
        self.iface.actionSelect().trigger()
        self.add_schema()
        self.layer_selection_changed(self.iface.activeLayer())
        self.dlg.radioButton.toggled.connect(self.on)
        self.dlg.radioButton_2.toggled.connect(self.on_2)
        self.dlg.segment.setEnabled(False)
        # self.dlg.radioButton.setChecked(False)
        # self.dlg.radioButton_2.setChecked(True)
        self.dlg.pushButton.setEnabled(True)
        for lay in QgsProject.instance().layerStore().mapLayers().values():
            if lay.name() ==  'vw_lane_poly':
                lay.selectionChanged.connect(self.getSelectedFeatures)
                lay.removeSelection()
                self.layer=lay
                self.conn.rollback()
        # show the dialog
        self.dlg.show()
        if self.dlg.radioButton_2.isChecked()==True:
            self.dlg.segment.setEnabled(True)
            self.dlg.pushButton.setEnabled(False)
        if self.dlg.radioButton.isChecked()==True:
            self.dlg.segment.setEnabled(False)
            self.dlg.pushButton.setEnabled(True)
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
    def on_2(self):
        if self.dlg.radioButton_2.isChecked()==True:
            self.dlg.segment.setEnabled(True)
            self.dlg.pushButton.setEnabled(False)
    def on(self):
        if self.dlg.radioButton.isChecked()==True:
            self.dlg.segment.setEnabled(False)
            self.dlg.pushButton.setEnabled(True)
    def getSelectedFeatures(self):
        # print("hjknm")
        sel_layer = self.iface.activeLayer()
        for info in sel_layer.selectedFeatures():
            lane_data = info['lane_id']
            if self.variable == '':
                # print("lane_class 1",lane_class_1)
                self.variable = lane_data
            else:
                if self.variable != lane_data:
                    if lane_data not in self.multiple_var:
                        self.multiple_var.append(lane_data)
        # print('self.variable',self.variable)
        # print('self.multiple_var',self.multiple_var)
        # pass

    def create_transation(self):
        lane_class=[]
        if self.dlg.radioButton.isChecked():
            sel_layer = self.iface.activeLayer()
            for info in sel_layer.selectedFeatures():
                lane_class.append(info['lane_class'])
            # print("lane_class 0",lane_class[0])
            # print("lane_class 1",lane_class[1])
            if lane_class[0]!=lane_class[1]:
                 QMessageBox.critical(self.dlg, 'lane_class Error',
                                    "Selected lane_poly lane_class Not Same.")
                 self.layer.removeSelection()
            else:
                var=''
                for i in self.multiple_var:
                    var += "'''" + i + "'''" + ','
                output = var[:-1]
                one_lane = "'" + self.variable + "'"
                # schema=self.data['schema']
                query = f"select {self.schema}.transition_creation(" + one_lane + ",ARRAY[" + output + "])"
                # print(query)
                self.cursor = self.conn.cursor()
                self.cursor.execute(query)
                self.conn.commit()
                QMessageBox.information(self.dlg, 'Successfull',
                                        "The operation has been successfully completed.\nHence the Transition is created.")
                self.variable = ''
                self.multiple_var = []
                self.layer.removeSelection()
                self.iface.mapCanvas().refreshAllLayers()

    
    def TestConnection(self):
        self.conn = psycopg2.connect(database=self.data['database'], user=self.data['user'],
                                     password=self.data['password'],
                                     host=self.data['host'], port=int(self.data['port']))
        self.cursor = self.conn.cursor()



    def create_segment(self):
        if self.dlg.radioButton_2.isChecked():
            layer = self.iface.activeLayer()
            var = ''
            for data in layer.selectedFeatures():
                lane_poly = data['lane_id']
                # print("lane_poly")
                var += "'''" + lane_poly + "'''" + ','

            final = var[:-1]
            # schema=self.data['schema']
            sql_query = f"select {self.schema}.segment_creation(ARRAY[" + final + "])"
            # print(sql_query)
            self.cursor = self.conn.cursor()
            self.cursor.execute(sql_query)
            self.conn.commit()

            self.iface.mapCanvas().refreshAllLayers()

            QMessageBox.information(self.dlg, 'Successfull', "The operation has been successfully completed.\nHence the Segment is created.")

    def close(self):
        self.dlg.close()

    def loadData(self):
        self.data = {}
        path2 = self.plugin_dir
        path = os.path.join(path2, "AppConfig.json")
        try:
            if os.path.exists(path):
                with open(path) as json_file:
                    self.data = json.load(json_file)
                    pass
                # print (self.data)
                pass
        except Exception as e:
            err1 = "unable read data:-\n" + str(e)
            QMessageBox.information(None, 'Error', err1)
            pass
    
    def set_schema(self):
        try:
            self.schema=self.dlg.cb.currentText()
            # print("self.schema",self.schema)
            # print("self.active_schema",self.active_schema)
            
            # match_schema='''"'''+self.schema+'''"'''
            # print("self.match_schema",match_schema)
            if self.active_schema==self.schema:
                self.dlg.segment.setEnabled(False)
                self.dlg.pushButton.setEnabled(False)
                # self.dlg.radioButton.setChecked(False)
                # self.dlg.radioButton_2.setChecked(False)
                QMessageBox.information(self.dlg, 'Success', "schema Set")
            else:
                self.dlg.segment.setEnabled(False)
                self.dlg.pushButton.setEnabled(False)
                QMessageBox.critical(self.dlg, 'Error', "Active layer schema & set schama 'Not Same' ")
        except Exception as e:
            pass
            # err1 = "select layer:-\n" + str(e)
            # QMessageBox.information(None, 'Error', err1)
            
     
        pass
    def add_schema(self):
        schema_lst=self.get_schema()
        self.dlg.cb.clear()
        self.dlg.cb.addItems(schema_lst)
        self.iface.mapCanvas().refreshAllLayers()
        
        
    def get_schema(self):
        schemaList=[]
        sql = "select * from information_schema.schemata where schema_name not like 'pg_%' and schema_name <>'information_schema' order by schema_name;"
        sql = "select * from information_schema.schemata where schema_name not like 'p%' and schema_name NOT LIKE 'i%'and schema_name NOT LIKE 'm%' and schema_name <>'information_schema' order by schema_name;"
        # self.cursor.execute(sql)
        isExecute, rows, sException_reson = self.sql_FeachRecords(sql)
        # self.conn.close()
        self.cursor = None
        if isExecute == False:
            QMessageBox.information(self.dlg, 'Get Schemas',
                                    "Unable to fetch Schemas from database:-" + str(sException_reson))
        else:
            for row in rows:
                schemaList.append(row[1])
            # print("schemaList", schemaList)
            return schemaList
        # print("schemaList", schemaList)
        pass
   
    def sql_FeachRecords(self,sql,isCommit = False ,isSilent = True,isCloseConn = True):
        isExecute = False
        sException_reson = None
        cur =None
        rows =None
        QgsMessageLog.logMessage("Query :- " + str(sql), "pgSetting",Qgis.Info)
        # cur = self.cursor
        try:
            # print("sql",sql)
            self.cursor.execute(sql)
            if isCommit == True:
                self.conn.commit()
            rows = self.cursor.fetchall()
            # print("row f",rows)
            isExecute = True
        except Exception as e:
            sException_reson = str(sys.exc_info())
            if isSilent== False:
                QMessageBox.information(self.dlg, 'schema', "Unable to Feach Records Query reason:-" + str(sys.exc_info()))
            QgsMessageLog.logMessage("Unable to Feach Records Query reason :-" + str(e), "Schema",Qgis.Info)
            isExecute = False
        finally:
            if isCloseConn == True:
                # self.conn.close()
                self.cursor = None
        return isExecute,rows,sException_reson  
    def layer_selection_changed(self,layer):
        try:
            # print("singal received",layer)
            source = layer.source()
            # print("source",source)
            kvp = source.split(" ")
            for kv in kvp:
                if kv.startswith("table"):
                    # self.active_schema = kv.split("=")[1][0:-15]
                    schema1= kv.split("=")[1][0:-1]
                    _schema=schema1.split(".")[0]
                    self.active_schema=_schema[1:-1]
                    # print( "self.active_schema",self.active_schema)
                    # print( "self.active_schema",self.active_schema)
                    # print( "schema1",schema1)
        except Exception as e:
            pass
            # err1 = "select layer:-\n" + str(e)
            # QMessageBox.information(None, 'Error', err1)

