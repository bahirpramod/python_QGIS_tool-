# -*- coding: utf-8 -*-
"""
/***************************************************************************
 MultiFeatureInformationUpdate
                                 A QGIS plugin
 This plugin is used to update class in multiple selected features of lane poly
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-05-03
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Shubham Udiwal
        email                : shubhamud@email.igenesys.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtWidgets import QFileDialog
from qgis.PyQt.QtCore import *
from qgis.PyQt.QtGui import *
from qgis.PyQt.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from qgis.gui import *
from qgis.core import *
from PyQt5 import *

import qgis
import json
import os.path
import psycopg2
import sys

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .multifeatureinformationupdate_dialog import MultiFeatureInformationUpdateDialog
import os.path


class MultiFeatureInformationUpdate:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.db = None
        self.portnum = None
        self.ip = None
        self.user = None
        self.currentDirectoryPath = None
        self.path = 'DatabaseConnection.ini'
        self.apppath = os.path.dirname(os.path.realpath(__file__))
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'MultiFeatureInformationUpdate_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Multi Feature Information Update')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None
        self.dlg = MultiFeatureInformationUpdateDialog()

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('MultiFeatureInformationUpdate', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/multifeatureinformationupdate/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Multi Feature Information Update'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        #self.first_start = True
        self.iface.layerTreeView().currentLayerChanged.connect(self.layer_selection_changed)
        self.dlg.pb1.clicked.connect(self.multipleclass)
        self.dlg.pb1.clicked.connect(self.update_atrr)
        self.dlg.pb2.clicked.connect(self.onCancelClick)
        self.dlg.Set_Schema.clicked.connect(self.set_schema)
        #self.dlg.rejected.connect(self.onCancelClick)


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Multi Feature Information Update'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""
        self.layer_selection_changed(self.iface.activeLayer())
        
        self.loadSetting()
        if self.getConnection():
            self.dlg.setWindowFlags(self.dlg.windowFlags() | QtCore.Qt.WindowStaysOnTopHint)
            self.dlg.txtHost.setText(str(self.ip))
            self.dlg.txtUsername.setText(str(self.user))
            self.dlg.txtPort.setText(str(self.portnum))
            self.dlg.txtDatabaseName.setText(str(self.db))
            layers = [layer for layer in QgsProject.instance().mapLayers().values()]
            sourcelayers = []
            laneclass = ['shoulder','zebra_stripe','bike','normal','shared_bus','parking','shared_bike','special_olympic','ego_non_drivable']
            self.dlg.cb1.clear()
            self.dlg.cb2.clear()
            for layer in layers:
                if type(layer).__name__ == "QgsVectorLayer":
                    if layer.geometryType() == 2:
                        if layer.name() == 'vw_lane_poly' :
                            sourcelayers.append((layer.name()))
            self.dlg.cb1.addItems(laneclass)
            self.dlg.cb2.addItems(sourcelayers)
            # show the dialog
            self.dlg.show()
            self.add_schema()
            self.dlg.pb1.setEnabled(False)
            
            # Run the dialog event loop
            result = self.dlg.exec_()
            # See if OK was pressed
            if result:
                # Do something useful here - delete the line containing pass and
                # substitute with your code.
                pass

    def onCancelClick(self):
        self.dlg.reject()

    def getLayerByName(self, pstrLayerName):  # Get layer from the name from the comboBox
        mc = self.iface.mapCanvas()
        nLayers = mc.layerCount()
        for l in range(nLayers):
            layer = mc.layer(l)
            if str(layer.name()) == pstrLayerName:
                return layer

    def getConnection(self):
        # self.host = self.dlg.txtHost.text()
        # self.port = self.dlg.txtPort.text()
        # self.userid = self.dlg.txtUsername.text()
        # self.pwd = self.dlg.txtPassword.text()
        # self.databas = self.dlg.txtDatabaseName.text()

        self.host = self.ip
        self.port = self.portnum
        self.userid = self.user
        self.databas = self.db
        self.pwd = self.pwd
        # self.schema = self.schma
        # self.schem = self.dlg.txtschema.text()

        # ---Host-----
        if (self.host) == '':
            QMessageBox.critical(self.dlg, "Error", "Please enter host")
            self.dlg.txtHost.setFocus()
        # elif (self.host).strip() == '':
        #     QMessageBox.critical(self.dlg, "Error", "Please enter valid host")
        #     self.dlg.txtHost.clear()
        #     self.dlg.txtHost.setFocus()
        # ---Port-----
        elif (self.port) == '':
            QMessageBox.critical(self.dlg, "Error", "Please enter port")
            self.dlg.txtPort.setFocus()
        # elif (self.port).strip() == '':
        #     QMessageBox.critical(self.dlg, "Error", "Please enter valid port")
        #     self.dlg.txtPort.clear()
        #     self.parent.dlg.txtPort.setFocus()
        # ---Databas-----
        elif (self.databas) == '':
            QMessageBox.critical(self.dlg, "Error", "Please enter Database Name")
            self.dlg.txtDatabaseName.setFocus()
        # elif (self.databas).strip() == '':
        #     QMessageBox.critical(self.dlg, "Error", "Please enter valid Database Name")
        #     self.dlg.txtDatabaseName.clear()
        #     self.dlg.txtDatabaseName.setFocus()
        # ---UserName-----
        elif (self.userid) == '':
            QMessageBox.critical(self.dlg, "Error", "Please enter Username")
            self.dlg.txtUsername.setFocus()
        # elif (self.userid).strip() == '':
        #     QMessageBox.critical(self.dlg, "Error", "Please enter valid Username")
        #     self.dlg.txtUsername.clear()
        #     self.dlg.txtUsername.setFocus()
        # ---Password-----
        elif (self.pwd).strip() == '':
            QMessageBox.critical(self.dlg, "Error", "Please enter password")
            self.dlg.txtPassword.clear()
            self.dlg.txtPassword.setFocus()
        elif (self.TestConnection()):
            # print "connection Success"
            #self.storeSetting(True)
            self.connectionFlag = True
            self.conn = None
            # QMessageBox.information(self.dlg, "Result", 'Connection Successful')
            # self.objDataInsert.showUi()
        else:
            #self.storeSetting(False)
            # print "connection Failed"
            self.connectionFlag = False
            QMessageBox.critical(self.dlg, "Error", self.dbError)

        self.data = {}
        path = os.path.join(self.plugin_dir, "AppConfig.json")
        try:
            if os.path.exists(path):
                with open(path) as json_file:
                    self.data = json.load(json_file)
                pass

            pass
        except Exception as e:
            err1 = "unable read data:-\n" + str(e)
            QMessageBox.information(self.dlg, "Error", err1)
            pass
        pass

        if True:
            try:
                self.conn = psycopg2.connect(database=self.databas,
                                             user=self.userid, password=self.pwd,
                                             host=self.host,
                                             port=int(self.port))
                self.cursor = self.conn.cursor()
                #QMessageBox.information(self.dlg, 'Connection Successfull', "Database Connected Successfully")
                return True

            except Exception as e:
                QMessageBox.information(self.dlg, 'Error', "Invalid Database connection ")
                return False




    def TestConnection(self):
        flag = False
        try:
            conn = psycopg2.connect(database=self.databas, user=self.userid, password=self.pwd, host=self.host,
                                    port=int(self.port))
            flag = True

        except Exception as e:
            flag = False
            self.dbError = str(e)
        finally:
            return flag



    def stackchanged(self):
        # self.getConnection()
        if self.getConnection():
            self.dlg.stackedWidget.setCurrentIndex(1)


    def loadSetting(self):
        if (len(str(self.path).strip()) > 0):
            # store path for next time
            QgsMessageLog.logMessage("Selected ini path2 = " + str(self.path), "Database")
            import configparser
            import string
            config = configparser.ConfigParser()
            config.readfp(open(os.path.join(self.apppath, self.path)))
            IsExistSection = False
            iniDatabaseSetting = None
            for section in config.sections():
                # print (section)

                if (str.lower(section) == str.lower("pgDatabase")):
                    iniDatabaseSetting = {"IP": "", "port": "", "dbname": "", "userid": "", "pwd": "","schema": "", "IsEmpty": ""}
                    iniDatabaseSetting["IsEmpty"] = True
                    options = config.options(section)
                    for option in options:
                        optionValue = ""
                        try:
                            optionValue = config.get(section, option)

                        except:
                            QgsMessageLog.logMessage('occur while reading ini file', "Database")
                            # dict1[option] = None

                        if (len(str(optionValue).strip()) > 0):
                            if (str.lower(option) == str.lower("IP")):
                                iniDatabaseSetting["IP"] = optionValue
                                iniDatabaseSetting["IsEmpty"] = False
                            elif (str.lower(option) == str.lower("Port")):
                                iniDatabaseSetting["port"] = optionValue
                                iniDatabaseSetting["IsEmpty"] = False
                            elif (str.lower(option) == str.lower("dbname")):
                                iniDatabaseSetting["dbname"] = optionValue
                                iniDatabaseSetting["IsEmpty"] = False
                            elif (str.lower(option) == str.lower("Userid")):
                                iniDatabaseSetting["userid"] = optionValue
                                iniDatabaseSetting["IsEmpty"] = False
                            elif (str.lower(option) == str.lower("pwd")):
                                iniDatabaseSetting["pwd"] = optionValue
                                iniDatabaseSetting["IsEmpty"] = False
                            elif (str.lower(option) == str.lower("schema")):
                                iniDatabaseSetting["schema"] = optionValue
                                iniDatabaseSetting["IsEmpty"] = False
            if (iniDatabaseSetting is None):
                self.ip = ""
                self.portnum = ""
                self.db = ""
                self.user = ""
                self.pwd = ""
                # self.schma = ""
                return False
            elif (iniDatabaseSetting["IsEmpty"] == True):
                self.ip = ""
                self.portnum = ""
                self.db = ""
                self.user = ""
                self.pwd = ""
                # self.schma = ""
                return False
            self.ip = str(iniDatabaseSetting["IP"]).strip()
            self.portnum = str(iniDatabaseSetting["port"]).strip()
            self.db = str(iniDatabaseSetting["dbname"]).strip()
            self.user = str(iniDatabaseSetting["userid"]).strip()
            self.pwd = str(iniDatabaseSetting["pwd"]).strip()
            # self.schma = str(iniDatabaseSetting["schema"]).strip()
            return True
        else:
            QMessageBox.information(None, 'reading ini file', "selected ini file is empty")
        return False


    def multipleclass(self):
        pass

    def update_atrr(self):
        # layer_name=self.dlg.cb2.addItems(sourcelayers)
        self.lay = self.iface.activeLayer()
        self.lay.startEditing()
        count = self.lay.selectedFeatureCount()
        if count <= 0:
                QMessageBox.information(self.dlg, "Info",
                                        " Please select the features")
                return
        lane_ids=[]
        for layer in self.lay.selectedFeatures():
            lane_id=(layer["lane_id"])
            lane_ids.append(lane_id)
        self.getlaneclassFromDB(lane_ids)
    def getlaneclassFromDB(self,lane_ids):
        # try:
        # print("text")
        var=''
        for i in lane_ids:
            var += "'''" + i + "'''" + ','
        output = var[:-1]
        # laneclass = {}
        # self.conn = psycopg2.connect(database= self.parent.database.dbname, user='postgres', password='matrix@123', host=self.parent.database.IP, port=self.parent.database.port)
        lane_class=self.dlg.cb1.currentText()
        
        self.conn = psycopg2.connect(database=self.databas, user=self.userid, password=self.pwd,
                                        host=self.host, port=int(self.port))
        cursors = self.conn.cursor()
        # self.cursor = self.conn.cursor()
        # sql = "Select * from public.lanes where lane_id='196618c8-c28d-479b-b700-c94842a9a3c1' "
        sql=f"SELECT {self.schema}.update_lane_class("+"'"+lane_class+"'"+",ARRAY[" + output + "])"
        print("11",sql)
        cursors.execute(sql)
        var=cursors.fetchall()
        self.conn.commit()
        # print(var)
        QMessageBox.information(self.dlg, "Info",
                                        "lane_class updated sucessfully")
        # except:
        #     QgsMessageLog.logMessage("Unable to Fetch lane records", "AddPostgresLayerToMap", Qgis.Info)
        # finally:
        #     self.conn.close()
        #     self.conn = None

    def set_schema(self):
        try:
            self.schema=self.dlg.cb.currentText()
            # print("self.schema",self.schema)
            # print("self.active_schema",self.active_schema)
            
            match_schema='''"'''+self.schema+'''"'''
            # print("self.match_schema",match_schema)
            if self.active_schema==match_schema:
                self.dlg.pb1.setEnabled(True)
                QMessageBox.information(self.dlg, 'Success', "schema Set")
            else:
                self.dlg.pb1.setEnabled(False)
                QMessageBox.critical(self.dlg, 'Error', "Active layer schema & set schama 'Not Same' ")
        except Exception as e:
            pass
            # err1 = "select layer:-\n" + str(e)
            # QMessageBox.information(None, 'Error', err1)
        
        pass
    def add_schema(self):
        schema_lst=self.get_schema()
        self.dlg.cb.clear()
        self.dlg.cb.addItems(schema_lst)
        
        
    def get_schema(self):
        schemaList=[]
        # sql = "select * from information_schema.schemata where schema_name not like 'pg_%' and schema_name <>'information_schema' order by schema_name;"
        sql = "select * from information_schema.schemata where schema_name not like 'p%' and schema_name NOT LIKE 'i%' and schema_name NOT LIKE 'm%' and schema_name <>'information_schema' order by schema_name;"
        # self.cursor.execute(sql)
        isExecute, rows, sException_reson = self.sql_FeachRecords(sql)
        # self.conn.close()
        self.cursor = None
        if isExecute == False:
            QMessageBox.information(self.dlg, 'Get Schemas',
                                    "Unable to fetch Schemas from database:-" + str(sException_reson))
        else:
            for row in rows:
                schemaList.append(row[1])
            # print("schemaList", schemaList)
            return schemaList
        # print("schemaList", schemaList)
        pass
    def sql_FeachRecords(self,sql,isCommit = False ,isSilent = True,isCloseConn = True):
        isExecute = False
        sException_reson = None
        cur =None
        rows =None
        QgsMessageLog.logMessage("Query :- " + str(sql), "pgSetting",Qgis.Info)
        # cur = self.cursor
        try:
            # print("sql",sql)
            self.cursor.execute(sql)
            if isCommit == True:
                self.conn.commit()
            rows = self.cursor.fetchall()
            # print("row f",rows)
            isExecute = True
        except Exception as e:
            sException_reson = str(sys.exc_info())
            if isSilent== False:
                QMessageBox.information(self.dlg, 'schema', "Unable to Feach Records Query reason:-" + str(sys.exc_info()))
            QgsMessageLog.logMessage("Unable to Feach Records Query reason :-" + str(e), "Schema",Qgis.Info)
            isExecute = False
        finally:
            if isCloseConn == True:
                # self.conn.close()
                self.cursor = None
        return isExecute,rows,sException_reson  
    def layer_selection_changed(self,layer):
        try:
            # print("singal received",layer)
            source = layer.source()
            # print("source",source)
            kvp = source.split(" ")
            for kv in kvp:
                if kv.startswith("table"):
                    # self.active_schema = kv.split("=")[1][0:-15]
                    schema1= kv.split("=")[1][0:-1]
                    self.active_schema=schema1.split(".")[0]
                    # print( "self.active_schema",self.active_schema)
                    # print( "schema1",schema1)
        except Exception as e:
            pass
            # err1 = "select layer:-\n" + str(e)
            # QMessageBox.information(None, 'Error', err1)