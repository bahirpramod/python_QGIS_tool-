# -*- coding: utf-8 -*-
"""
/***************************************************************************
 MoveToolForRIL
                                 A QGIS plugin
 moveing geometry and add gen remark moved for genesys
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-04-17
        git sha              : $Format:%H$
        copyright            : (C) 2023 by genesys
        email                : "Pramod Bahir" <pramoddb@email.igenesys.com>; 
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import *
from qgis.PyQt.QtGui import *
from qgis.PyQt.QtWidgets import *
from qgis.core import *
from qgis.utils import *
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5 import QtGui
from qgis.core import *
from qgis.gui import *
from collections import *
import sys
import math
import itertools
from qgis import processing
from qgis.core import QgsGeometry, QgsGeometryUtils


# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .move_tool_dialog import MoveTolForRILDialog
import os.path


class MoveTolForRIL:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # QgsMapToolEmitPoint.__init__(self, self.iface.mapCanvas())
        # self.canvas = self.iface.mapCanvas()
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'MoveTolForRIL_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Move Tool')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('MoveTolForRIL', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/move_tool/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Move Tool For RIL'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Move Tool'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = MoveTolForRILDialog()
            self.dlg.Selectfeature.clicked.connect(self.activate_select_tool)
            self.dlg.movefeature.clicked.connect(self.move)

        # show the dialog
        # show the dialog
        self.dlg.setWindowFlags(Qt.WindowStaysOnTopHint)
        self.dlg.show()
        # self.addlayers()
        # self.move()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            # current_layer=self.activeLayer()
            # print("current_layer", current_layer)
            pass
   
    def activate_select_tool(self,iface):
        self.lay = self.iface.activeLayer()
        self.lay.startEditing()
        field_name=[]
        for feature in self.lay.getFeatures():
            for fields in feature.fields():
                if fields.name()=='Gen Remark':
                    field_name.append(fields.name())
                elif fields.name()=='Gen remark':
                    field_name.append(fields.name())
                elif fields.name()=='gen remark':
                    field_name.append(fields.name())
                elif fields.name()=='gen Remark':
                    field_name.append(fields.name())
        if len(field_name)==0:
            QMessageBox.information(self.dlg, "Info",
                                        " Please add Fields Gen Remark")
        self.iface.actionSelect().trigger()
        
    def move(self,iface):
        for lyr in self.lay.selectedFeatures():
            self.iface.actionMoveFeature().trigger()
            self.lay.geometryChanged.connect(self.update_atrr)
            
    def update_atrr(self):
        
        for layer in self.lay.selectedFeatures():
            id=layer.id()
            for fields in layer.fields():
                if fields.name()=='Gen Remark':
                   field_idx = self.lay.fields().indexOf('Gen Remark') 
                elif fields.name()=='Gen remark':
                    field_idx = self.lay.fields().indexOf('Gen remark')
                elif fields.name()=='gen remark':
                    field_idx = self.lay.fields().indexOf('gen remark')
                elif fields.name()=='gen Remark':
                    field_idx = self.lay.fields().indexOf('gen Remark')
            # print("id",id)
            self.lay.changeAttributeValue(id, field_idx, 'Moved by Genesys')
                    
        
       
        
            
